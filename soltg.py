import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import TOKEN, WEATHER_API_KEY, NASA_API_KEY, CAT_API_KEY
import requests
from datetime import datetime, timedelta
import random

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ—à–∫–∏", callback_data="cats")],
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ", callback_data="weather")],
        [InlineKeyboardButton(text="–ö–æ—Å–º–æ—Å", callback_data="space")]
    ])

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await get_main_menu())

@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "–ö–æ—à–∫–∏ - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏\n"
        "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ\n"
        "–ö–æ—Å–º–æ—Å - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è –∏–∑ NASA"
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—à–∫–∏"
def get_random_cat():
    try:
        url = "https://api.thecatapi.com/v1/images/search"
        headers = {"x-api-key": CAT_API_KEY}
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            return response.json()[0]['url']
        return ""
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ The Cat API: {e}")
        return ""

@dp.callback_query(F.data == "cats")
async def cats_handler(callback: CallbackQuery):
    await callback.answer()  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    cat_image_url = get_random_cat()
    if cat_image_url:
        await callback.message.answer_photo(photo=cat_image_url, caption="–ú–∏–ª—ã–π –∫–æ—Ç–∏–∫ –¥–ª—è –≤–∞—Å! üê±")
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ"
def mypogoda(city_name, units):
    try:
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={WEATHER_API_KEY}&units={units}'
        response = requests.get(url, timeout=10)
        data = response.json()
        stroka = ''
        if response.status_code == 200:
            stroka = f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}: \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}% \n–û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}"
        else:
            stroka = f"–û—à–∏–±–∫–∞: {data['message']}"
        return stroka
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenWeather API: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

@dp.callback_query(F.data == "weather")
async def weather_handler(callback: CallbackQuery):
    await callback.answer()  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
    city_name = 'Moscow'
    units = 'metric'
    weather_info = mypogoda(city_name, units)
    await callback.message.answer(weather_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ—Å–º–æ—Å"
def get_random_apod():
    try:
        end_date = datetime.now()
        start_date = end_date - timedelta(days=365)
        random_date = start_date + (end_date - start_date) * random.random()
        date_str = random_date.strftime("%Y-%m-%d")

        url = f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}&date={date_str}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return data['url'], data['title']
        return None, None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NASA API: {e}")
        return None, None

@dp.callback_query(F.data == "space")
async def space_handler(callback: CallbackQuery):
    await callback.answer()  # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
    photo_url, title = get_random_apod()
    if photo_url:
        await callback.message.answer_photo(photo=photo_url, caption=f"{title}")
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Å–º–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
